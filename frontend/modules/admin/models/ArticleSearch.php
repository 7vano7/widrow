<?php

namespace frontend\modules\admin\models;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use Yii;

/**
 * ArticleSearch represents the model behind the search form of `frontend\modules\admin\models\Article`.
 */
class ArticleSearch extends Article
{
    public $lang;
    public $title;
    /**
     * {@inheritdoc}
     */
    public function rules():array
    {
        return [
            [['category', 'top', 'user_id'], 'integer'],
            [['status', 'image', 'gif', 'url'], 'string'],
            [['lang', 'title'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->lang = Yii::$app->language;
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Article::find()->joinWith(['articleTranslation', 'menu'])->where(['!=', 'menu.is_menu', Menu::MENU_FALSE])->orderBy
        (['article.id'=>SORT_DESC]);

        // add conditions that should always apply here
        $dataProvider = new ActiveDataProvider([
            'query' => $query->distinct(),
        ]);

        $dataProvider->setSort([
            'attributes' => [
                'id',
                'status',
                'image',
                'title',
                'category',
                'top',
                'user_id',
                'url',
                'created_at',
                'updated_at',
                'lang',
                'article_lang' => [
                    'asc' => ['article_translation.article_id' => SORT_ASC],
                    'desc' => ['article_translation.article_id' => SORT_DESC]
                ],
            ]
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            return $dataProvider;
        }
        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'status' => $this->status,
//            'lang'=>$this->lang,
        ]);
        if($this->title) {
            $query->andWhere(['like', 'article_translation.title', $this->title]);
        }
        if($this->lang) {
            $query->andWhere(['article_translation.lang'=>$this->lang]);
        }
        if($this->url) {
            $query->andWhere(['like', 'article.url', $this->url]);
        }
        if($this->top) {
            $query->andWhere(['article.top' => $this->top]);
        }
        if($this->category) {
            $query->andWhere(['article.category' => $this->category]);
        }
        if($this->status) {
            $query->andWhere(['article.status' => $this->status]);
        }
        if($this->user_id) {
            $query->andWhere(['article.user_id' => $this->user_id]);
        }
        if($this->user_id) {
            $query->andWhere(['user_id'=>$this->user_id]);
        }
        return $dataProvider;
    }
}
