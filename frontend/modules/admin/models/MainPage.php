<?php

namespace frontend\modules\admin\models;

use frontend\models\form\UploadForm;
use Yii;
use yii\imagine\Image;
use yii\web\NotFoundHttpException;
use yii\web\UploadedFile;

/**
 * Class MainPage
 * @package frontend\modules\admin\models
 */
class MainPage extends \common\models\StaticPage
{
    public $lang;
    public $title;

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['position', 'default', 'value'=>self::POSITION_MAIN],
            [['title', 'file'], 'string'],
            ['lang', 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('admin','ID'),
            'file' => Yii::t('static', 'File'),
            'title' => Yii::t('static', 'Title'),
        ];
    }


    /**
     * Get relation StaticPageTranslation models
     * @return array
     */
    public function getPageTranslation()
    {
        return $this->hasMany(StaticPageTranslation::className(), ['static_page_id'=>'id']);
    }

    /**
     * Upload file
     * @param $file string
     * @return mixed
     */
    public function saveImage($file): void
    {

        $path = Yii::getAlias('@frontend') . '/web/images/site/';
        $image = new UploadForm;
        $image->imageFile = UploadedFile::getInstance($this, $file);
        if (!is_dir($path)) {
            if (!mkdir($path, 0777) && !is_dir($path)) {
                throw new NotFoundHttpException(sprintf('Directory "%s" was not created', $path));
            }
        }

        if (!file_exists($path . $image->imageFile->name)) {
            if (!preg_match('/(png|jpg|jpeg|giff|mp4|mpeg4)$/ui', $image->imageFile->extension, $match)) {
                $this->addError($file, Yii::t('admin', 'Error format'));
            } else {
                $this->$file = '/images/site/' .$image->upload($path);
            }

        } elseif (file_exists($path . $image->imageFile->name)) {
            $this->$file = '/images/site/' . $image->imageFile->name;
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        StaticPageTranslation::deleteAll(['static_page_id'=>$this->id]);
        foreach ($this->lang as $lang)
        {
            $lang->static_page_id = $this->id;
            $lang->content = '';
            $lang->save();
        }
    }
}
